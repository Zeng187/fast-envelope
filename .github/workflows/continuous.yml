name: Build

on:
  push:
    branches: [master]
  pull_request:

env:
  CTEST_OUTPUT_ON_FAILURE: ON
  CTEST_PARALLEL_LEVEL: 2

jobs:
  ####################
  # Linux / macOS
  ####################

  Unix:
    name: ${{ matrix.name }} (${{ matrix.config }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        config: [Debug, Release]
        opts: [Geogram_Predicates, Geogram_Psm_Predicates, None]
        include:
          - os: macos-latest
            name: macOS
          - os: ubuntu-latest
            name: Linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -o Acquire::Retries=3 install \
          libblas-dev \
          libboost-filesystem-dev \
          libboost-system-dev \
          libboost-thread-dev \
          libglu1-mesa-dev \
          libsuitesparse-dev \
          xorg-dev \
          ccache
          echo 'CACHE_PATH=~/.ccache' >> "$GITHUB_ENV"

      - name: Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ccache gmp
          echo 'CACHE_PATH=~/Library/Caches/ccache' >> "$GITHUB_ENV"

      - name: Cache Build
        id: cache-build
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ matrix.config }}-cache

      - name: Prepare ccache
        run: |
          ccache --max-size=1.0G
          ccache -V && ccache --show-stats && ccache --zero-stats

      - name: Configure with Geogram_Predicates
        if: matrix.opts == 'Geogram_Predicates'
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DFAST_ENVELOPE_WITH_GEOGRAM_PREDICATES=ON \
            -DFAST_ENVELOPE_WITH_GEOGRAM_PSM_PREDICATES=OFF \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }}

      - name: Configure with Geogram_Psm_Predicates
        if: matrix.opts == 'Geogram_Psm_Predicates'
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DFAST_ENVELOPE_WITH_GEOGRAM_PREDICATES=OFF \
            -DFAST_ENVELOPE_WITH_GEOGRAM_PSM_PREDICATES=ON \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }}

      - name: Configure without Geogram
        if: matrix.opts == 'None'
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DFAST_ENVELOPE_WITH_GEOGRAM_PREDICATES=OFF \
            -DFAST_ENVELOPE_WITH_GEOGRAM_PSM_PREDICATES=OFF \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }}

      - name: Build
        run: cd build; make -j2; ccache --show-stats

      - name: Tests
        if: matrix.arch == 'x86_64' # no ARM vm on actions yet
        run: cd build; make -j2; ./FastEnvelope_test #ctest --verbose --output-on-failure

  ####################
  # Windows
  ####################

  Windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]
        opts: [Geogram_Predicates, Geogram_Psm_Predicates, None]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set env
        run: |
          echo "appdata=$env:LOCALAPPDATA" >> ${env:GITHUB_ENV}

      - name: Cache build
        id: cache-build
        uses: actions/cache@v4
        with:
          path: ${{ env.appdata }}\Mozilla\sccache
          key: ${{ runner.os }}-${{ matrix.config }}-cache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ matrix.config }}-cache

      - name: Prepare sccache
        run: |
          iwr -useb 'https://raw.githubusercontent.com/scoopinstaller/install/master/install.ps1' -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          scoop install sccache --global
          # Scoop modifies the PATH so we make it available for the next steps of the job
          echo "${env:PATH}" >> ${env:GITHUB_PATH}

      - name: Configure and run with Geogram_Predicates
        if: matrix.opts == 'Geogram_Predicates'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          cmake -G Ninja ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DFAST_ENVELOPE_WITH_GEOGRAM_PREDICATES=ON ^
            -DFAST_ENVELOPE_WITH_GEOGRAM_PSM_PREDICATES=OFF ^
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
            -B build ^
            -S .
          cd build
          ninja -j1

      - name: Configure and run with Geogram_Psm_Predicates
        if: matrix.opts == 'Geogram_Psm_Predicates'
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          cmake -G Ninja ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DFAST_ENVELOPE_WITH_GEOGRAM_PREDICATES=OFF ^
            -DFAST_ENVELOPE_WITH_GEOGRAM_PSM_PREDICATES=ON ^
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
            -B build ^
            -S .
          cd build
          ninja -j1

      - name: Configure and run without Geogram
        if: matrix.opts == 'None'
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          cmake -G Ninja ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DFAST_ENVELOPE_WITH_GEOGRAM_PREDICATES=OFF ^
            -DFAST_ENVELOPE_WITH_GEOGRAM_PSM_PREDICATES=OFF ^
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
            -B build ^
            -S .
          cd build
          ninja -j1

      - name: Tests
        run: |
          cd build
          ./FastEnvelope_test
          #ctest --verbose --output-on-failure
